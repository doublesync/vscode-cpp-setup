// --------------------- //
// ----- Credits ------- //
// --------------------- //
// gevleesklakt : Helped me with the de-referencing logic.
// 4thQtrKai    : Found all of the offsets for the game.

#ifndef OFFSETS_H // Include guard to prevent multiple inclusions
#define OFFSETS_H

#pragma once
#include <iostream>
#include <windows.h>
#include <unordered_map>
#include <bitset>
#include "utility.h"

// ----------------------------- //
// ----- Entity / Player ------- //
// ----------------------------- //
const uintptr_t PLAYER_BASE_ADDRESS = (0x07E39430);
const uintptr_t PLAYER_OFFSET_1 = (0x18);
const uintptr_t PLAYER_OFFSET_2_LENGTH (0x448);    // Macro for calculating second offset

// --------------------------- //
// ----- Player Vitals ------- //
// --------------------------- //
const uintptr_t OFFSET_FIRST_NAME = (0x28);
const uintptr_t OFFSET_LAST_NAME = (0x0);

// ------------------------------------------ //
// ----- Player Attributes and Badges ------- //
// ------------ and Tendencies -------------- //
// ------------------------------------------ //

// Let's make a map of all of the attribute offsets, so we can easily access them
const std::unordered_map<std::string, uintptr_t> OFFSET_ATTRIBUTES = {
    {"Driving Layup", 0x392},
    {"Post Fade", 0x393},
    {"Post Hook", 0x394},
    {"Post Moves", 0x395},
    {"Draw Foul", 0x396},
    {"Close Shot", 0x397},
    {"Midrange Shot", 0x398},
    {"3pt Shot", 0x399},
    {"Free Throw", 0x39A},
    {"Ball Control", 0x39B},
    {"Passing IQ", 0x39C},
    {"Pass Accuracy", 0x39D},
    {"Offensive Rebound", 0x39E},
    {"Standing Dunk", 0x3A7},
    {"Driving Dunk", 0x3A8},
    {"Shot IQ", 0x3B0},
    {"Passing Vision", 0x3C5},
    {"Hands", 0x3C6},
    {"Defensive Rebound", 0x39F},
    {"Interior Defense", 0x3A0},
    {"Perimeter Defense", 0x3A1},
    {"Block", 0x3A3},
    {"Steal", 0x3A4},
    {"Speed", 0x3A9},
    {"Speed with Ball", 0x3AA},
    {"Vertical", 0x3AB},
    {"Strength", 0x3AC},
    {"Stamina", 0x3AD},
    {"Hustle", 0x3AE},
    {"Agility", 0x3AF},
    {"Pass Perception", 0x3A2},
    {"Defensive Consistency", 0x3A5},
    {"Help Defense IQ", 0x3A6},
    {"Offensive Consistency", 0x3B1},
    {"Intangibles", 0x3B2},
    {"Potential", 0x3B3}
};
const std::vector<std::tuple<std::string, uintptr_t, int>> OFFSET_BADGES = {
    {"Float Game", 0x42C, 7},
    {"Posterizer", 0x42D, 2},
    {"Rise Up", 0x42D, 5},
    {"Aerial Wizard", 0x42E, 0},
    {"Hook Specialist", 0x42E, 3},
    {"Layup Mixmaster", 0x436, 5},
    {"Paint Prodigy", 0x437, 0},
    {"Physical Finisher", 0x437, 3},
    {"Post Powerhouse", 0x438, 0},
    {"Post-Up Poet", 0x438, 3},
    {"Post Fade Phenom", 0x42E, 6},
    {"Deadeye", 0x42F, 1},
    {"Limitless Range", 0x42F, 4},
    {"Slippery Off-Ball", 0x430, 0},
    {"Mini Marksman", 0x438, 6},
    {"Set Shot Specialist", 0x439, 1},
    {"Shifty Shooter", 0x439, 4},
    {"Bail Out", 0x430, 3},
    {"Break Starter", 0x430, 6},
    {"Dimer", 0x431, 1},
    {"Handles for Days", 0x431, 4},
    {"Unpluckable", 0x431, 7},
    {"Versatile Visionary", 0x439, 7},
    {"Ankle Assassin", 0x43A, 2},
    {"Lightning Launch", 0x43A, 5},
    {"Strong Handle", 0x43B, 0},
    {"Post Lockdown", 0x432, 2},
    {"Challenger", 0x432, 5},
    {"Off-Ball Pest", 0x433, 0},
    {"Pick Dodger", 0x433, 3},
    {"Glove", 0x434, 0},
    {"Interceptor", 0x434, 3},
    {"Pogo Stick", 0x434, 6},
    {"On-Ball Menace", 0x43B, 3},
    {"High-Flying Denier", 0x43C, 0},
    {"Paint Patroller", 0x43C, 3},
    {"Brick Wall", 0x435, 7},
    {"Immovable Enforcer", 0x436, 2},
    {"Boxout Beast", 0x435, 1},
    {"Rebound Chaser", 0x435, 4}
};
const std::vector<std::tuple<std::string, uintptr_t, int>>OFFSET_TENDENCIES = {
    {"Contested Jumper Mid", 0x3EA, 5},
    {"Contested Jumper 3pt", 0x3E9, 6},
    {"Drive Pull Up Mid", 0x3F0, 7},
    {"Drive Pull Up 3pt", 0x3F0, 0},
    {"Off Screen Shot Mid", 0x3DC, 0},
    {"Off Screen Shot 3pt", 0x3E4, 0},
    {"Shot Close", 0x3D5, 6},
    {"Shot Close Left", 0x3D6, 5},
    {"Shot Close Middle", 0x3D8, 0},
    {"Shot Close Right", 0x3D8, 7},
    {"Shot Mid Center", 0x3DE, 5},
    {"Shot Mid Left", 0x3DC, 7},
    {"Shot Mid Left Center", 0x3DD, 6},
    {"Shot Mid Right", 0x3E0, 7},
    {"Shot Mid Right Center", 0x3E0, 0},
    {"Shot Mid", 0x3D9, 6},
    {"Shot 3pt", 0x3E1, 6},
    {"Shot 3pt Center", 0x3E6, 5},
    {"Shot 3pt Left", 0x3E4, 7},
    {"Shot 3pt Left Center", 0x3E5, 6},
    {"Shot 3pt Right", 0x3E8, 7},
    {"Shot 3pt Right Center", 0x3E8, 0},
    {"Shot Under Basket", 0x3D4, 7},
    {"Spin Jumper", 0x3ED, 6},
    {"Spot Up Shot Mid", 0x3DA, 5},
    {"Spot Up Shot 3pt", 0x3E2, 5},
    {"Step Through Shot", 0x3D4, 0},
    {"Stepback Jumper Mid", 0x3EC, 7},
    {"Stepback Jumper 3pt", 0x3EC, 0},
    {"Transition Pull Up 3pt", 0x3EE, 5},
    {"Use Glass", 0x3F1, 6},
    {"Driving Layup Tendency", 0x3C8, 7},
    {"Standing Dunk Tendency", 0x3C9, 6},
    {"Driving Dunk Tendency", 0x3CA, 5},
    {"Flashy Dunk", 0x3CC, 0},
    {"Alley-Oop", 0x3CC, 7},
    {"Putback Dunk", 0x3CD, 6},
    {"Crash", 0x3CE, 5},
    {"Spin Layup", 0x3D0, 0},
    {"Hop Step Layup", 0x3D0, 7},
    {"Euro Step Layup", 0x3D1, 6},
    {"Floater", 0x3D2, 5},
    {"Triple Threat Pump Fake", 0x3F6, 5},
    {"Triple Threat Jab Step", 0x3F8, 0},
    {"Triple Threat Idle", 0x3F8, 7},
    {"Triple Threat Shoot", 0x3F9, 6},
    {"Setup With Sizeup", 0x3FA, 5},
    {"Setup With Hesitation", 0x3FC, 0},
    {"No Setup Dribble", 0x3FC, 7},
    {"Drive", 0x3F2, 5},
    {"Spot Up Drive", 0x3F4, 0},
    {"Off Screen Drive", 0x3F4, 7},
    {"Drive Right", 0x3F5, 6},
    {"Driving Crossover", 0x3FD, 6},
    {"Driving Spin", 0x3FE, 5},
    {"Driving Step Back", 0x400, 0},
    {"Driving Half Spin", 0x400, 7},
    {"Driving Double Crossover", 0x401, 6},
    {"Driving Behind The Back", 0x402, 5},
    {"Driving Dribble Hesitation", 0x404, 0},
    {"Driving In And Out", 0x404, 7},
    {"No Driving Dribble Move", 0x405, 6},
    {"Attack Strong On Drive", 0x406, 5},
    {"Dish To Open Man", 0x408, 0},
    {"Flashy Pass", 0x421, 6},
    {"Alley Oop Pass", 0x422, 5},
    {"Post Up", 0x409, 6},
    {"Post Shimmy Shot", 0x411, 6},
    {"Post Face Up", 0x412, 5},
    {"Post Back Down", 0x414, 0},
    {"Post Aggressive Backdown", 0x414, 7},
    {"Shoot From Post", 0x415, 6},
    {"Post Hook Left", 0x416, 5},
    {"Post Hook Right", 0x418, 0},
    {"Post Fade Left", 0x418, 7},
    {"Post Fade Right", 0x419, 6},
    {"Post Up And Under", 0x41A, 5},
    {"Post Hop Shot", 0x41C, 0},
    {"Post Step Back Shot", 0x41C, 7},
    {"Post Drive", 0x41D, 6},
    {"Post Spin", 0x41E, 5},
    {"Post Drop Step", 0x420, 0},
    {"Post Hop Step", 0x420, 7},
    {"Shoot", 0x3C8, 0},
    {"Touches", 0x408, 7},
    {"Roll Vs Pop", 0x40A, 5},
    {"Transition Spot Up", 0x40C, 0},
    {"Iso Vs Elite Defender", 0x40C, 7},
    {"Iso Vs Good Defender", 0x40D, 6},
    {"Iso Vs Average Defender", 0x40E, 5},
    {"Iso Vs Poor Defender", 0x410, 0},
    {"Play Discipline", 0x410, 7},
    {"Pass Interception", 0x424, 0},
    {"Take Charge", 0x424, 7},
    {"On Ball Steal", 0x425, 6},
    {"Contest Shot", 0x426, 5},
    {"Block Shot", 0x428, 0},
    {"Foul", 0x428, 7},
    {"Hard Foul", 0x429, 6},
};

// -----------------------------------------  //
// ----- Attribute and Badge Values --------- //
// ------------ and Tendencies -------------  //
// ------------------------------------------ //
const std::unordered_map<int, std::string> ATTRIBUTE_INT_TO_BINARY = {
    {25, "0"},
    {26, "11"},
    {27, "110"},
    {28, "1001"},
    {29, "1100"},
    {30, "1111"},
    {31, "10010"},
    {32, "10101"},
    {33, "11000"},
    {34, "11011"},
    {35, "11110"},
    {36, "100001"},
    {37, "100100"},
    {38, "100111"},
    {39, "101010"},
    {40, "101101"},
    {41, "110000"},
    {42, "110011"},
    {43, "110110"},
    {44, "111001"},
    {45, "111100"},
    {46, "111111"},
    {47, "1000010"},
    {48, "1000101"},
    {49, "1001000"},
    {50, "1001011"},
    {51, "1001110"},
    {52, "1010001"},
    {53, "1010100"},
    {54, "1010111"},
    {55, "1011010"},
    {56, "1011101"},
    {57, "1100000"},
    {58, "1100011"},
    {59, "1100110"},
    {60, "1101001"},
    {61, "1101100"},
    {62, "1101111"},
    {63, "1110010"},
    {64, "1110101"},
    {65, "1111000"},
    {66, "1111011"},
    {67, "1111110"},
    {68, "10000001"},
    {69, "10000100"},
    {70, "10000111"},
    {71, "10001010"},
    {72, "10001101"},
    {73, "10010000"},
    {74, "10010011"},
    {75, "10010110"},
    {76, "10011001"},
    {77, "10011100"},
    {78, "10011111"},
    {79, "10100010"},
    {80, "10100101"},
    {81, "10101000"},
    {82, "10101011"},
    {83, "10101110"},
    {84, "10110001"},
    {85, "10110100"},
    {86, "10110111"},
    {87, "10111010"},
    {88, "10111101"},
    {89, "11000000"},
    {90, "11000011"},
    {91, "11000110"},
    {92, "11001001"},
    {93, "11001100"},
    {94, "11001111"},
    {95, "11010010"},
    {96, "11010101"},
    {97, "11011000"},
    {98, "11011011"},
    {99, "11011110"},
    {100, "11100001"},
    {101, "11100100"},
    {102, "11100111"},
    {103, "11101010"},
    {104, "11101110"},
    {105, "11110001"},
    {106, "11110100"},
    {107, "11111000"},
    {108, "11111011"},
    {109, "11111110"},
    {110, "11111111"}
};
const std::unordered_map<std::string, int> ATTRIBUTE_BINARY_TO_INT = {
    {"0", 25},
    {"11", 26},
    {"110", 27},
    {"1001", 28},
    {"1100", 29},
    {"1111", 30},
    {"10010", 31},
    {"10101", 32},
    {"11000", 33},
    {"11011", 34},
    {"11110", 35},
    {"100001", 36},
    {"100100", 37},
    {"100111", 38},
    {"101010", 39},
    {"101101", 40},
    {"110000", 41},
    {"110011", 42},
    {"110110", 43},
    {"111001", 44},
    {"111100", 45},
    {"111111", 46},
    {"1000010", 47},
    {"1000101", 48},
    {"1001000", 49},
    {"1001011", 50},
    {"1001110", 51},
    {"1010001", 52},
    {"1010100", 53},
    {"1010111", 54},
    {"1011010", 55},
    {"1011101", 56},
    {"1100000", 57},
    {"1100011", 58},
    {"1100110", 59},
    {"1101001", 60},
    {"1101100", 61},
    {"1101111", 62},
    {"1110010", 63},
    {"1110101", 64},
    {"1111000", 65},
    {"1111011", 66},
    {"1111110", 67},
    {"10000001", 68},
    {"10000100", 69},
    {"10000111", 70},
    {"10001010", 71},
    {"10001101", 72},
    {"10010000", 73},
    {"10010011", 74},
    {"10010110", 75},
    {"10011001", 76},
    {"10011100", 77},
    {"10011111", 78},
    {"10100010", 79},
    {"10100101", 80},
    {"10101000", 81},
    {"10101011", 82},
    {"10101110", 83},
    {"10110001", 84},
    {"10110100", 85},
    {"10110111", 86},
    {"10111010", 87},
    {"10111101", 88},
    {"11000000", 89},
    {"11000011", 90},
    {"11000110", 91},
    {"11001001", 92},
    {"11001100", 93},
    {"11001111", 94},
    {"11010010", 95},
    {"11010101", 96},
    {"11011000", 97},
    {"11011011", 98},
    {"11011110", 99},
    {"11100001", 100},
    {"11100100", 101},
    {"11100111", 102},
    {"11101010", 103},
    {"11101110", 104},
    {"11110001", 105},
    {"11110100", 106},
    {"11111000", 107},
    {"11111011", 108},
    {"11111110", 109},
    {"11111111", 110}
};

// ----------------------------- //
// ----- End Of Offsets -------- //
// ----------------------------- //

#endif // OFFSETS_H